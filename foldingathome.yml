# https://github.com/jkataja/cfn-foldingathome
AWSTemplateFormatVersion: 2010-09-09
Description: |
  Run Folding@home on spot instances to help find cure for COVID-19.

Mappings:
  # Ubuntu 18.04 LTS AMI IDs as of 2020-04-25 from https://cloud-images.ubuntu.com/locator/ec2/
  Ubuntu1804:
    af-south-1:
      ImageId: 'ami-0914f03407aa25fb8'
    ap-east-1:
      ImageId: 'ami-c790d6b6'
    ap-northeast-1:
      ImageId: 'ami-0278fe6949f6b1a06'
    ap-northeast-2:
      ImageId: 'ami-00edfb46b107f643c'
    ap-northeast-3:
      ImageId: 'ami-00eac2261db3c9df5'
    ap-south-1:
      ImageId: 'ami-0b44050b2d893d5f7'
    ap-southeast-1:
      ImageId: 'ami-0f7719e8b7ba25c61'
    ap-southeast-2:
      ImageId: 'ami-04fcc97b5f6edcd89'
    ca-central-1:
      ImageId: 'ami-0edd51cc29813e254'
    cn-north-1:
      ImageId: 'ami-0071f6f4df15863cc'
    cn-northwest-1:
      ImageId: 'ami-0a22b8776bb32836b'
    eu-central-1:
      ImageId: 'ami-0e342d72b12109f91'
    eu-north-1:
      ImageId: 'ami-050981837962d44ac'
    eu-west-1:
      ImageId: 'ami-0701e7be9b2a77600'
    eu-west-2:
      ImageId: 'ami-0eb89db7593b5d434'
    eu-west-3:
      ImageId: 'ami-08c757228751c5335'
    me-south-1:
      ImageId: 'ami-051274f257aba97f9'
    sa-east-1:
      ImageId: 'ami-077d5d3682940b34a'
    us-east-1:
      ImageId: 'ami-085925f297f89fce1'
    us-east-2:
      ImageId: 'ami-07c1207a9d40bc3bd'
    us-west-1:
      ImageId: 'ami-0f56279347d2fa43e'
    us-west-2:
      ImageId: 'ami-003634241a8fcdec0'

Parameters: 
  Anonymous:
    Description: Folding@home fold anonymously (default true for anonymous)
    Type: String
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'
  FoldingAtHomeTeam:
    Description: Folding@home team number (default 0 for no team)
    Type: Number
    Default: 0
  FoldingAtHomeUser:
    Description: Folding@home user name (default Anonymous for anonymous user)
    Type: String
    Default: 'Anonymous'
  FoldingAtHomePasskey:
    Description: Folding@home pass key (default empty for anonymous user)
    Type: String
    Default: ''
  InstanceCount:
    Description: Scale-out count of g4dn.xlarge instances to run the Folding@home client
    Type: Number
    Default: 1
  KeyName:
    Description: SSH key name for ubuntu user
    Type: AWS::EC2::KeyPair::KeyName
  Subnets:
    Description: Subnets in VPC (for example the default VPC subnets 172.31.0.0/20, 172.31.16.0/20 and 172.31.32.0/20)
    Type: List<AWS::EC2::Subnet::Id>
  VpcId:
    Description: VPC for the stack (for example the default VPC 172.31.0.0/16)
    Type: AWS::EC2::VPC::Id
  SSHLocation:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$"
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/0-28
    Default: '0.0.0.0/0'
    Description: Network allowed to SSH to instances in public subnet (default 0.0.0.0/0 to allow from everywhere)
    Type: String

Resources: 
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MaxSize: !Ref InstanceCount
      DesiredCapacity: !Ref InstanceCount
      MinSize: '0'
      VPCZoneIdentifier: !Ref Subnets
      Tags:
        - Key: Name
          Value: Folding@home
          PropagateAtLaunch: True
    CreationPolicy:
      ResourceSignal:
        Count: !Ref InstanceCount
        Timeout: 'PT10M' # 10 minutes

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData: 
        BlockDeviceMappings:
          - DeviceName: '/dev/sda1'
            Ebs:
              DeleteOnTermination: true
              VolumeSize: 20
              VolumeType: 'gp2'
        IamInstanceProfile:
          Name: !Ref InstanceProfile
        ImageId: !FindInMap [ Ubuntu1804, !Ref 'AWS::Region', ImageId ]
        InstanceType: 'g4dn.xlarge'
        InstanceMarketOptions:
          MarketType: 'spot'
          SpotOptions:
            SpotInstanceType: 'one-time'
        EbsOptimized: true
        KeyName: !Ref KeyName
        Monitoring:
          Enabled: true
        SecurityGroupIds:
          - !Ref SecurityGroup
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -ex
            exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
            # Use instance store for Folding@home
            mkfs -t ext4 /dev/nvme0n1
            mkdir /var/lib/fahclient
            echo "/dev/nvme0n1 /var/lib/fahclient ext4 defaults,discard 0 0" >>/etc/fstab
            mount -a
            chown ubuntu:ubuntu /var/lib/fahclient
            # Install NVidia CUDA drivers and Python
            wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/cuda-ubuntu1804.pin
            mv cuda-ubuntu1804.pin /etc/apt/preferences.d/cuda-repository-pin-600
            apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/7fa2af80.pub
            add-apt-repository "deb http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/ /"
            apt-get update
            apt-get -y install cuda python-minimal python-pip
            # Optimize GPU settings
            nvidia-smi -ac 5001,1590
            # Install cfn-tools and awscli for health signalling
            pip install aws-cfn-bootstrap awscli
            # Install Folding@home
            PATCH_VERSION=$(curl -sL https://download.foldingathome.org/js/fah-downloads.js | awk -F'(fahclient_|_amd64.deb)' '/debian-stable-64bit/ {print $2;exit}')
            MAJOR_VERSION=$(curl -sL https://download.foldingathome.org/js/fah-downloads.js | awk -F'(/debian-stable-64bit/|/fahclient_)' '/debian-stable-64bit/ {print $2;exit}')
            FAH_URL=https://download.foldingathome.org/releases/public/release/fahclient/debian-stable-64bit/${!MAJOR_VERSION}/fahclient_${!PATCH_VERSION}_amd64.deb
            curl -o /tmp/latest.deb -L ${!FAH_URL}
            dpkg-deb -x /tmp/latest.deb /
            mkdir /etc/fahclient
            cat<<END >/etc/fahclient/config.xml
            <config>
              <cause v='COVID_19'/>
              <next-unit-percentage v='100'/>
              <fold-anon v="${Anonymous}"/>
              <user v="${FoldingAtHomeUser}"/>
              <team v="${FoldingAtHomeTeam}"/>
              <passkey v="${FoldingAtHomePasskey}"/>
              <power v="full"/>
              <gpu v="true"/>
              <slot id="0" type="CPU"/>
              <slot id="1" type="GPU"/>
              <allow>127.0.0.1</allow>
              <web-allow>127.0.0.1</web-allow>
            </config>
            END
            cat<<END >/var/lib/fahclient/GPUs.txt
            0x10de:0x1eb8:2:7:TU104GL [Tesla T4]
            END
            cat<<END >/usr/local/bin/asg-unhealthy
            #!/bin/bash
            [ "\$SERVICE_RESULT" == "success" ] && exit 0
            exec /usr/local/bin/aws autoscaling set-instance-health --instance-id $(curl http://169.254.169.254/latest/meta-data/instance-id) --health-status "Unhealthy" --region ${AWS::Region}
            END
            chmod a+rx /usr/local/bin/asg-unhealthy
            cat<<END >/etc/systemd/system/fahclient.service
            [Unit]
            Description=Folding@home client
            After=network.target

            [Service]
            User=ubuntu
            WorkingDirectory=/var/lib/fahclient
            ExecStart=/usr/bin/FAHClient --config /etc/fahclient/config.xml
            ExecStopPost=/usr/local/bin/asg-unhealthy

            [Install]
            WantedBy=multi-user.target
            END
            systemctl enable fahclient
            systemctl start fahclient
            # send success signal
            /usr/local/bin/cfn-signal --success true --stack ${AWS::StackName} --resource AutoScalingGroup --region ${AWS::Region}

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Folding@home spot instance security group
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHLocation
      SecurityGroupEgress:
        - IpProtocol: udp
          FromPort: 53
          ToPort: 53
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: 123
          ToPort: 123
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref CustomHealthCheckRole

  CustomHealthCheckRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: 'Allow'
            Principal:
              Service:
                - 'ec2.amazonaws.com'
      Policies:
        - PolicyName: 'CustomHealthCheck'
          PolicyDocument:
           Version: '2012-10-17'
           Statement:
              - Effect: 'Allow'
                Action: 'autoscaling:SetInstanceHealth'
                Resource: !Sub 'arn:aws:autoscaling:${AWS::Region}:${AWS::AccountId}:autoScalingGroup:*'
                Condition:
                  StringEquals:
                    'aws:ResourceTag/aws:cloudformation:stack-name': !Ref 'AWS::StackName'
